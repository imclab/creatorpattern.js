{"name":"Creatorpattern.js","tagline":"microlib to easily add the creator pattern to your class.","body":"creatorpattern.js\r\n=================\r\n\r\nMicro Library to easily add the creator pattern to your class.\r\nIt works in browser and node.js\r\n\r\n## How To Use It\r\n\r\nto mixin the creator pattern in a class ```FooClass`, do the following in node.js\r\n\r\n```\r\nvar mixinCreatorPattern = require('creatorpattern');\r\nmixinCreatorPattern(FooClass, 'FooClass')\r\n```\r\n\r\nor do the following in your browser\r\n\r\n```\r\nmixinCreatorPattern(FooClass, 'FooClass')\r\n```\r\n\r\nAfter that, ```FooClass``` honor the creator pattern. so instead of\r\n\r\n```\r\nvar foo = new FooClass(2,1)\r\n```\r\n\r\nyou can do \r\n\r\n```\r\nvar foo\t= FooClass.create(2,1);\r\n```\r\n\r\n## How To Include It\r\n\r\nin node.js\r\n\r\n```\r\n npm install creatorpattern.js\r\n```\r\n\r\nin your browser\r\n\r\n```\r\n <script src='creatorpattern.js'></script>\r\n```\r\n\r\n## API\r\n\r\nIt includes a single function ```mixinCreatorPattern(constructorFunction, nameOfClass)```\r\n\r\n```\r\nmixinCreatorPattern(FooClass, 'FooClass')\r\n```\r\n\r\n* the first parameter ```FooClass``` is the contructor of your class.\r\n* The second parameter ```'FooClass'``` is optional and is the name of the class in string.\r\nIt does its best to keep the name of the class. Thus \r\nwhen you display your variables in the js console, you will see the\r\nproper name.\r\nIf the name isn't provided, it will take the function name of the\r\nconstructor function. If there is none, the name won't be kept\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}